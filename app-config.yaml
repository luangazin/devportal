app:
  title: Devportal
  baseUrl: http://localhost:3000
  support:
    url: https://github.com/veecode-platform/support/discussions 
    items: 
      - title: Issues
        icon: github
        links:
          - url: https://github.com/veecode-platform/support/discussions
            title: GitHub Issues
permission:
  enabled: true

backend:
  auth:
    keys:
      - secret: ${BACKEND_AUTH_SECRET_KEY}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
  database:
    client: ${DATABASE_CLIENT}
    connection:
      host: ${DATABASE_HOST}
      port: ${DATABASE_PORT}
      database: ${DATABASE_NAME}
      user: ${DATABASE_USER}
      password: ${DATABASE_PASSWORD}
  cache:
    store: memory
  cors:
    origin: http://localhost:3000
    methods: [GET, POST, PUT, DELETE, PATCH]
    credentials: true
  csp:
    connect-src: ["'self'", "http:", "https:"]
  reading:
    allow:
      - host: example.com
      - host: "*.mozilla.org"
proxy:
  "/grafana/api":
    
    target: ${GRAFANA_DOMAIN}
    headers:
      Authorization: Bearer ${GRAFANA_TOKEN}

  "/argocd/api":
    target: ${ARGOCD_DOMAIN}
    changeOrigin: true
    
    secure: true
    headers:
      Cookie:
        $env: ARGOCD_TOKEN

organization:
  name: Devportal

techdocs:
  builder: "local"
  generator:
    runIn: "local"
  publisher:
    type: "local"

kubernetes:
  serviceLocatorMethod:
    type: "multiTenant"
  clusterLocatorMethods:
    - type: "config"
      clusters:
        - url: ${KUBERNETES_URL}
          name: devportal-kubernetes
          authProvider: "serviceAccount"
          skipTLSVerify: false
          skipMetricsLookup: false
          serviceAccountToken: ${KUBERNETES_SERVICE_ACCOUNT_TOKEN}
          caData: ${KUBERNETES_CERTIFICATE_DATA}

argocd:
  username: ${ARGOCD_USER}
  password: ${ARGOCD_TOKEN}
  appLocatorMethods:
    - type: "config"
      instances:
        - name: argoInstance1
          url: ${ARGOCD_URL}
          token: ${ARGOCD_TOKEN}

integrations:
  github:
    - host: github.com
      token: ${GITHUB_TOKEN_SECRET}
  bitbucketCloud:
    - username: ${BITBUCKET_CLOUD_USERNAME}
      appPassword: ${BITBUCKET_CLOUD_TOKEN}
  bitbucketServer:
    - host: ${BITBUCKET_SERVER_HOST}
      apiBaseUrl: ${BITBUCKET_SERVER_BASE_URL}
      token: ${BITBUCKET_SERVER_TOKEN}
  gitlab:
   - host: gitlab.com
     token: ${GITLAB_TOKEN_SECRET}

catalog:
  rules:
    - allow: [Component, API, Location, Template]
  providers:
    github:
      providerId: 
        organization: ${CATALOG_GITHUB_ORGANIZATION} 
        catalogPath: ${CATALOG_GITHUB_CATALOG_PATH} 
        filters:
          branch: ${CATALOG_GITHUB_BRANCH} 
          repository: ${CATALOG_GITHUB_REPOSITORY} 
          validateLocationsExist: ${CATALOG_GITHUB_LOCATION_VALIDATION} 

    bitbucketCloud:
      yourProviderId: 
        catalogPath: ${CATALOG_BITBUCKET_CLOUD_CATALOG_PATH} 
      filters: 
        
        repoSlug: ${CATALOG_BITBUCKET_CLOUD_REPOSLUG} 
      workspace: ${CATALOG_BITBUCKET_CLOUD_WORKSPACE}

    bitbucketServer:
      yourProviderId:
        host: ${CATALOG_BITBUCKET_SERVER_HOST}
        catalogPath: ${CATALOG_BITBUCKET_SERVER_CATALOG_PATH} 
        filters: 
          projectKey: ${CATALOG_BITBUCKET_SERVER_PROJECT_KEY} 
          repoSlug: ${CATALOG_BITBUCKET_SERVER_REPO_SLUG} 
    gitlab:
      yourProviderId:
        host: ${CATALOG_GITLAB_HOST} 
        branch: ${CATALOG_GITLAB_BRANCH} 
        group: ${CATALOG_GITLAB_GROUP_NAME} 
        entityFilename: ${CATALOG_GITLAB_ENTITY_FILE_NAME} 
        projectPattern: /[\s\S]*/ 

  locations:
  - type: url
    target: https://github.com/mclarke47/dice-roller/blob/master/catalog-info.yaml
  - type: url
    target: https://github.com/backstage/backstage/blob/master/catalog-info.yaml

auth:
  environment: ${AUTH_ENVIRONMENT}
  

  session:
    secret: ${AUTH_USER_SESSION_SECRET}
  providers:
    okta:
      clientId: ${OKTA_CLIENT_ID}
      clientSecret: ${OKTA_CLIENT_SECRET}
      audience: ${OKTA_AUDIENCE}
      authServerId: ${OKTA_AUTH_SERVER_ID}
      apiToken: ${OKTA_API_TOKEN}

    keycloak:
      metadataUrl: ${KEYCLOAK_METADATA_URL}
      clientId: ${KEYCLOAK_CLIENT_ID}
      clientSecret: ${KEYCLOAK_CLIENT_SECRET}
      prompt: ${KEYCLOAK_PROMPT}

    github:
      clientId: ${AUTH_GITHUB_CLIENT_ID}
      clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}

enabledPlugins:
  vault: false
  grafana: false
  kubernetes: false
  argocd: false

platform:
  guest:
    enabled: true
  apiManagement:
    enabled: false
  
vault:
  baseUrl: ${VAULT_BASE_URL}
  token: ${VAULT_TOKEN_RENEWABLE}

grafana:
  domain: ${GRAFANA_DOMAIN}
  unifiedAlerting: true
okta:
  host: ${OKTA_HOST}
  token: ${OKTA_TOKEN}

kong:
  api-manager: ${KONG_API_MANAGER_HOST}
  admin-token: ${KONG_ADMIN_TOKEN}
