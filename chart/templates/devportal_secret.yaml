{{- $backend_token := .Values.appConfig.backend.secret | default uuidv4 }} 
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "devportal-charts.fullname" . }}-credentials
type: Opaque
stringData:
  BACKEND_AUTH_SECRET_KEY: {{ $backend_token }}
  AUTH_USER_SESSION_SECRET: {{ $backend_token }}
  {{- if (and .Values.auth.providers .Values.auth.providers.keycloak .Values.auth.providers.keycloak.metadataUrl) }}
  KEYCLOAK_METADATA_URL: {{ .Values.auth.providers.keycloak.metadataUrl }}
  KEYCLOAK_BASE_URL: {{ printf "%s" (regexFind "^(https?://[^/]+)" .Values.auth.providers.keycloak.metadataUrl) }}
  {{- end }}
  {{- if (and .Values.auth.providers .Values.auth.providers.keycloak .Values.auth.providers.keycloak.clientId) }}
  KEYCLOAK_CLIENT_ID: {{ .Values.auth.providers.keycloak.clientId }}
  {{- end }}
  {{- if (and .Values.auth.providers .Values.auth.providers.keycloak .Values.auth.providers.keycloak.clientSecret) }}
  KEYCLOAK_CLIENT_SECRET: {{ .Values.auth.providers.keycloak.clientSecret }}
  {{- end }}
  {{- if (and .Values.auth.providers .Values.auth.providers.keycloak .Values.auth.providers.keycloak.admin .Values.auth.providers.keycloak.admin.username) }}
  KEYCLOAK_ADMIN_USERNAME: {{ .Values.auth.providers.keycloak.admin.username }}
  {{- end }}
  {{- if (and .Values.auth.providers .Values.auth.providers.keycloak .Values.auth.providers.keycloak.admin .Values.auth.providers.keycloak.admin.password) }}
  KEYCLOAK_ADMIN_PASSWORD: {{ .Values.auth.providers.keycloak.admin.password }}
  {{- end }}
  {{- if (and .Values.appConfig.database.connection .Values.appConfig.database.connection.host) }}
  DATABASE_HOST: {{ .Values.appConfig.database.connection.host }}
  {{- end }}
  {{- if (and .Values.appConfig.database.connection .Values.appConfig.database.connection.database) }}
  DATABASE_NAME: {{ .Values.appConfig.database.connection.database | default "platform_devportal" }}
  {{- end }}
  {{- if (and .Values.appConfig.database.connection .Values.appConfig.database.connection.user) }}
  DATABASE_USER: {{ .Values.appConfig.database.connection.user }}
  {{- end }}
  {{- if (and .Values.appConfig.database.connection .Values.appConfig.database.connection.password) }}
  DATABASE_PASSWORD: {{ .Values.appConfig.database.connection.password | default "postgres1234" | quote }}
  {{- end }}
  {{- if (and .Values.grafana .Values.grafana.domain) }}
  GRAFANA_DOMAIN: {{ .Values.grafana.domain }}
  {{- end }}
  {{- if (and .Values.grafana .Values.grafana.token) }}
  GRAFANA_TOKEN: {{ .Values.grafana.token }}
  {{- end }}
  {{- if (and .Values.argocd .Values.argocd.domain) }}
  ARGOCD_DOMAIN: "{{ .Values.argocd.domain }}"
  ARGOCD_URL_API: "{{ .Values.argocd.domain }}/api/v1"
  {{- end }}
  {{- if (and .Values.argocd .Values.argocd.username) }}
  ARGOCD_USER: {{ .Values.argocd.username }}
  {{- end }}
  {{- if (and .Values.argocd .Values.argocd.token) }}
  ARGOCD_TOKEN: "{{ .Values.argocd.token }}"
  {{- end }}
  {{- if (and .Values.argocd .Values.argocd.authToken) }}
  ARGOCD_AUTH_TOKEN: "{{ .Values.argocd.authToken }}"
  {{- end }}
  {{- if (and .Values.vault .Values.vault.domain) }}
  VAULT_BASE_URL: {{ .Values.vault.domain }}
  {{- end }}
  {{- if (and .Values.vault .Values.vault.token) }}
  VAULT_TOKEN_RENEWABLE: {{ .Values.vault.token }}
  {{- end }}
  {{- if (and .Values.vault .Values.vault.secretEngine) }}
  VAULT_SECRET_ENGINE: {{ .Values.vault.secretEngine | default "secrets" }}
  {{- end }}
  {{- if (and .Values.kong .Values.kong.apiManager) }}
  KONG_API_MANAGER_HOST: {{ .Values.kong.apiManager }}
  {{- end }}
  {{- if (and .Values.kong .Values.kong.adminToken) }}
  KONG_ADMIN_TOKEN: {{ .Values.kong.adminToken }}
  {{- end }}
  {{- if (and .Values.okta .Values.okta.domain) }}
  OKTA_HOST: {{ .Values.okta.domain }}
  {{- end }}
  {{- if (and .Values.okta .Values.okta.token) }}
  OKTA_TOKEN: {{ .Values.okta.token }}
  {{- end }}
  {{- if (and .Values.integrations .Values.integrations.github .Values.integrations.github.token) }}
  GITHUB_TOKEN_SECRET: {{ .Values.integrations.github.token }}
  {{- end }}
  {{- if (and .Values.kubernetes .Values.kubernetes.serviceAccountToken) }}
  KUBERNETES_SERVICE_ACCOUNT_TOKEN: {{ .Values.kubernetes.serviceAccountToken }}
  {{- end }}
  {{- if (and .Values.kubernetes .Values.kubernetes.caData) }}
  KUBERNETES_CERTIFICATE_DATA: {{ .Values.kubernetes.caData }}
  {{- end }}
  {{- if (and .Values.auth.providers .Values.auth.providers.github .Values.auth.providers.github.clientId) }}
  AUTH_GITHUB_CLIENT_ID: {{ .Values.auth.providers.github.clientId }}
  {{- end }}
  {{- if (and .Values.auth.providers .Values.auth.providers.github .Values.auth.providers.github.clientSecret) }}
  AUTH_GITHUB_CLIENT_SECRET: {{ .Values.auth.providers.github.clientSecret }}
  {{- end }}
  {{- if (and .Values.integrations.gitlab .Values.integrations.gitlab.token) }}
  GITLAB_TOKEN_SECRET: {{ .Values.integrations.gitlab.token }}
  {{- end }}
  {{- if hasKey .Values.catalog.providers "keycloak" }}
  KEYCLOAK_ADMIN_USERNAME: {{ .Values.catalog.providers.keycloak.username }}
  KEYCLOAK_ADMIN_PASSWORD: {{ .Values.catalog.providers.keycloak.password }}
  {{- end }}