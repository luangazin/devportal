{{- $app_path_without_last_slash := trimSuffix "/" .Values.appConfig.app.baseUrl}} 
{{- $backend_path_without_last_slash := trimSuffix "/" .Values.appConfig.backend.baseUrl}} 
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{- include "devportal-charts.fullname" . }}-app-env"
data:
  {{- if not .Values.grafana.enabled }}
  GRAFANA_DOMAIN: ""
  {{- end }}
  app-config: |
    app:
      title: {{ .Values.appConfig.title | default "Platform Devportal" }}
      baseUrl: {{ $app_path_without_last_slash |quote }}
      support:
        url: https://github.com/veecode-platform/support/discussions 
        items: 
          - title: Issues
            icon: github
            links:
              - url: https://github.com/veecode-platform/support/discussions
                title: GitHub Issues
    permission:
      enabled: true

    backend:
      auth:
        keys:
          - secret: ${BACKEND_AUTH_SECRET_KEY}
      baseUrl: {{ $backend_path_without_last_slash }}
      listen:
        port: 7007
      database:
        client: {{ .Values.appConfig.database.client }}
        {{- if eq .Values.appConfig.database.client "better-sqlite3" }}
          {{- if and .Values.appConfig.database.connection .Values.appConfig.database.connection.directory }}
        directory: {{ .Values.appConfig.database.connection.directory }}
          {{- else }}
        connection: ':memory:'
          {{- end }}
        {{- else }}
        pluginDivisionMode: schema
        connection:
          host: ${DATABASE_HOST}
          port: {{ .Values.appConfig.database.connection.port }}
          database: ${DATABASE_NAME}
          user: ${DATABASE_USER}
          password: ${DATABASE_PASSWORD}
        {{- end }}
      cache:
        store: memory
      cors:
        origin: {{ $app_path_without_last_slash }}
        methods: [GET, POST, PUT, DELETE, PATCH]
        credentials: true
      csp:
        connect-src: ["'self'", "http:", "https:"]
        img-src: ["'self'", 'data:', 'https://platform.vee.codes']
      reading:
        allow:
          - host: example.com
          - host: "*.mozilla.org"
    
    {{- if or .Values.grafana.enabled .Values.argocd.enabled }}
    proxy:
      {{- if .Values.grafana.enabled | default false }}
      "/grafana/api":
        target: ${GRAFANA_DOMAIN}
        headers:
          Authorization: Bearer ${GRAFANA_TOKEN}
      {{- end }}
      {{- if .Values.argocd.enabled | default false }}
      "/argocd/api":
        target: ${ARGOCD_URL_API}
        changeOrigin: true
        secure: true
        headers:
          Cookie:
            $env: ARGOCD_AUTH_TOKEN
      {{- end }}
    {{- end }}
    organization:
      name: Devportal

    techdocs:
      builder: "local"
      generator:
        runIn: "local"
      publisher:
        type: "local"

    {{- if .Values.kubernetes}}
    kubernetes:
      serviceLocatorMethod:
        type: {{ .Values.kubernetes.type | default "multiTenant" }}
      clusterLocatorMethods:
        - type: "config"
          clusters:
            - url: {{ .Values.kubernetes.url | quote }}
              name: {{ .Values.kubernetes.name  }}
              authProvider: {{ .Values.kubernetes.authProvider | default "serviceAccount"}}
              skipTLSVerify: {{ .Values.kubernetes.skipTLSVerify | default false}}
              skipMetricsLookup: {{ .Values.kubernetes.skipMetricsLookup | default false}}
              serviceAccountToken: ${KUBERNETES_SERVICE_ACCOUNT_TOKEN}
              caData: ${KUBERNETES_CERTIFICATE_DATA}
    {{- end }}
    {{- if .Values.argocd.enabled }}
    argocd:
      username: ${ARGOCD_USER}
      password: ${ARGOCD_TOKEN}
      appLocatorMethods:
        - type: "config"
          instances:
            - name: argoInstance1
              url: ${ARGOCD_DOMAIN}
              token: ${ARGOCD_AUTH_TOKEN}
    {{- end }}
    {{- if .Values.integrations }}
    integrations:
      {{- if .Values.integrations.github }}
      github:
        - host: {{ .Values.integrations.github.host | default "github.com" | quote }}
          token: ${GITHUB_TOKEN_SECRET}
          tokenFrontEnd: ${GITHUB_TOKEN_SECRET}
      {{- end }}
      {{- if .Values.integrations.bitbucketCloud }}
      bitbucketCloud:
        - username: ${BITBUCKET_CLOUD_USERNAME}
          appPassword: ${BITBUCKET_CLOUD_TOKEN}
      {{- end }}
      {{- if .Values.integrations.bitbucketServer  }}
      bitbucketServer:
        - host: {{ .Values.integrations.bitbucketServer.host | default "bitbucket.org" | quote }}
          apiBaseUrl: ${BITBUCKET_SERVER_BASE_URL}
          token: ${BITBUCKET_SERVER_TOKEN}
          tokenFrontEnd: ${BITBUCKET_SERVER_TOKEN}
      {{- end }}
      {{- if .Values.integrations.gitlab  }}
      gitlab:
      - host: {{ .Values.integrations.gitlab.host | default "gitlab.com" | quote }}
        {{- if .Values.integrations.gitlab.apiBaseUrl }}
        apiBaseUrl: {{ .Values.integrations.gitlab.apiBaseUrl | quote }}
        {{- end }}
        {{- if .Values.integrations.gitlab.baseUrl }}
        baseUrl: {{ .Values.integrations.gitlab.baseUrl | quote }}
        {{- end }}
        token: ${GITLAB_TOKEN_SECRET}
        tokenFrontEnd: ${GITLAB_TOKEN_SECRET}
      {{- end }}
    {{- end }}
    catalog:
      {{- if .Values.catalog.rules  }}
      rules:{{- range .Values.catalog.rules }}
        - allow: {{ .allow | toJson }}
      {{- end }}
      {{- end }}
      
      {{- if .Values.catalog.providers }}
      providers:
        {{- if .Values.catalog.providers.github }}
        github:
          providerId: 
            organization: {{ .Values.catalog.providers.github.organization | quote }}
            catalogPath: {{ .Values.catalog.providers.github.catalogPath | quote }}
            validateLocationsExist: {{ .Values.catalog.providers.github.validateLocationsExist | default true }}
            {{- if .Values.catalog.providers.github.filters }}
            filters:
              branch: {{ .Values.catalog.providers.github.filters.branch | default "main" | quote }}
              repository: {{ .Values.catalog.providers.github.filters.repository | quote }}
            {{- end }}
            schedule:    
              frequency:
                {{- if and .Values.catalog.providers.github.schedule .Values.catalog.providers.github.schedule.frequency }}
                minutes: {{ .Values.catalog.providers.github.schedule.frequency }}
                {{- else }}
                minutes: 60
                {{- end }}
              timeout: 
                {{- if and .Values.catalog.providers.github.schedule .Values.catalog.providers.github.schedule.timeout }}
                minutes: {{ .Values.catalog.providers.github.schedule.timeout }}
                {{- else }}
                minutes: 3
                {{- end }}
        {{- end }}
        {{- if .Values.catalog.providers.bitbucketCloud }}
        bitbucketCloud:
          yourProviderId: 
            catalogPath: ${CATALOG_BITBUCKET_CLOUD_CATALOG_PATH} 
          filters: 
            repoSlug: ${CATALOG_BITBUCKET_CLOUD_REPOSLUG} 
          workspace: ${CATALOG_BITBUCKET_CLOUD_WORKSPACE}
          schedule:    
            frequency:
              {{- if and .Values.catalog.providers.bitbucketCloud.schedule .Values.catalog.providers.bitbucketCloud.schedule.frequency }}
              minutes: {{ .Values.catalog.providers.bitbucketCloud.schedule.frequency }}
              {{- else }}
              minutes: 60
              {{- end }}
            timeout: 
              {{- if and .Values.catalog.providers.bitbucketCloud.schedule .Values.catalog.providers.bitbucketCloud.schedule.timeout }}
              minutes: {{ .Values.catalog.providers.bitbucketCloud.schedule.timeout }}
              {{- else }}
              minutes: 3
              {{- end }}
        {{- end }}
        {{- if .Values.catalog.providers.bitbucketServer }}
        bitbucketServer:
          yourProviderId:
            host: ${CATALOG_BITBUCKET_SERVER_HOST}
            catalogPath: ${CATALOG_BITBUCKET_SERVER_CATALOG_PATH} 
            filters: 
              projectKey: ${CATALOG_BITBUCKET_SERVER_PROJECT_KEY} 
              repoSlug: ${CATALOG_BITBUCKET_SERVER_REPO_SLUG}
            schedule:    
              frequency:
                {{- if and .Values.catalog.providers.bitbucketServer.schedule .Values.catalog.providers.bitbucketServer.schedule.frequency }}
                minutes: {{ .Values.catalog.providers.bitbucketServer.schedule.frequency }}
                {{- else }}
                minutes: 60
                {{- end }}
              timeout: 
                {{- if and .Values.catalog.providers.bitbucketServer.schedule .Values.catalog.providers.bitbucketServer.schedule.timeout }}
                minutes: {{ .Values.catalog.providers.bitbucketServer.schedule.timeout }}
                {{- else }}
                minutes: 3
                {{- end }}
        {{- end }}
        {{- if .Values.catalog.providers.gitlab }}
        gitlab:
          yourProviderId:
            host: {{ .Values.catalog.providers.gitlab.host | default "gitlab.com" | quote }}
            orgEnabled: {{ .Values.catalog.providers.gitlab.orgEnabled | default false }}
            branch: {{ .Values.catalog.providers.gitlab.branch | default "main" | quote }} 
            group: {{ .Values.catalog.providers.gitlab.group | quote }}
            entityFilename: {{ .Values.catalog.providers.gitlab.entityFilename | default "catalog-info.yaml" | quote }}
            {{- if .Values.catalog.providers.gitlab.projectPattern}}
            projectPattern: {{ .Values.catalog.providers.gitlab.projectPattern | quote }}
            {{- end }}
            schedule:    
              frequency:
                {{- if and .Values.catalog.providers.gitlab.schedule .Values.catalog.providers.gitlab.schedule.frequency }}
                minutes: {{ .Values.catalog.providers.gitlab.schedule.frequency }}
                {{- else }}
                minutes: 60
                {{- end }}
              timeout: 
                {{- if and .Values.catalog.providers.gitlab.schedule .Values.catalog.providers.gitlab.schedule.timeout }}
                minutes: {{ .Values.catalog.providers.gitlab.schedule.timeout }}
                {{- else }}
                minutes: 3
                {{- end }}
        {{- end }}
        {{- if hasKey .Values.catalog.providers "keycloak" }}
        keycloakOrg:
          default:
            baseUrl: {{ .Values.catalog.providers.keycloak.baseUrl }}
            loginRealm: {{ .Values.catalog.providers.keycloak.loginRealm | default "master" }}
            realm: {{ .Values.catalog.providers.keycloak.realm | default "platform-devportal" }}
            username: ${KEYCLOAK_ADMIN_USERNAME}
            password: ${KEYCLOAK_ADMIN_PASSWORD}
            schedule:    
              frequency:
                {{- if and .Values.catalog.providers.keycloak.schedule .Values.catalog.providers.keycloak.schedule.frequency }}
                minutes: {{ .Values.catalog.providers.keycloak.schedule.frequency }}
                {{- else }}
                minutes: 60
                {{- end }}
              timeout: 
                {{- if and .Values.catalog.providers.keycloak.schedule .Values.catalog.providers.keycloak.schedule.timeout }}
                minutes: {{ .Values.catalog.providers.keycloak.schedule.timeout }}
                {{- else }}
                minutes: 3
                {{- end }}
            userQuerySize: {{ .Values.catalog.providers.keycloak.userQuerySize | default 500 }}
            groupQuerySize: {{ .Values.catalog.providers.keycloak.groupQuerySize | default 250 }}
        {{- end }}
      {{- end }}
      {{- if .Values.locations }}
      locations: {{- range .Values.locations }}
        - type: {{- indent 1 .type }}
          target: {{- indent 1 .target }}
          {{- if .rules }}
          rules: {{- range .rules }}
            - allow: {{ .allow | toJson }}
          {{- end }}
          {{- end }}
      {{- end }}
      {{- end }}
    auth:
      environment: {{ .Values.auth.environment | default "development" | quote }}
      session:
        secret: ${AUTH_USER_SESSION_SECRET}
      {{- if .Values.auth.providers }}
      providers:
        {{- if .Values.auth.providers.keycloak }}
        keycloak:
          development:
            metadataUrl: ${KEYCLOAK_METADATA_URL}
            clientId: ${KEYCLOAK_CLIENT_ID}
            clientSecret: ${KEYCLOAK_CLIENT_SECRET}
            prompt: {{ .Values.auth.providers.keycloak.prompt | default "auto"}}
            baseUrl: ${KEYCLOAK_BASE_URL}
            {{- if .Values.auth.providers.keycloak.admin }}
            {{- if .Values.auth.providers.keycloak.admin.username }}
            username: ${KEYCLOAK_ADMIN_USERNAME}
            {{- end }}
            {{- if .Values.auth.providers.keycloak.admin.password }}
            password: ${KEYCLOAK_ADMIN_PASSWORD}
            {{- end }}
            {{- end }}
        {{- end }}
        {{- if .Values.auth.providers.github }}
        github:
          development:
            clientId: ${AUTH_GITHUB_CLIENT_ID}
            clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
        {{- end }}
      {{- end }}
    enabledPlugins:
      vault: {{ .Values.vault.enabled | default false }}
      grafana: {{ .Values.grafana.enabled | default false }}
      kubernetes: {{ .Values.kubernetes.enabled | default false }}
      argocd: {{ .Values.argocd.enabled | default false }}
      gitlabPlugin: {{ hasKey .Values.integrations "gitlab" }}
      keycloak: {{ hasKey .Values.catalog.providers "keycloak" }}
    platform:
      guest:
        enabled: {{ .Values.platform.guest.enabled | default false }}
      apiManagement:
        enabled: {{ .Values.platform.apiManagement.enabled | default false }}
        readOnlyMode: {{ .Values.platform.apiManagement.readOnlyMode | default false }}
      defaultGroup:
        enabled: {{ .Values.platform.defaultGroups.enabled | default false }}
      group:
        admin: {{ .Values.platform.defaultGroups.admin | default "platform-admin" }}
        user: {{ .Values.platform.defaultGroups.user | default "platform-user" }}
      behaviour: 
        mode: {{ .Values.platform.behaviour.mode | default "product" | quote}}
        {{- if eq .Values.platform.behaviour.mode "custom" }}
        home: {{ .Values.platform.behaviour.home | default true }}
        catalog: {{ .Values.platform.behaviour.catalog | default true }}
        apis: {{ .Values.platform.behaviour.apis | default true }}
        create: {{ .Values.platform.behaviour.create | default true }}
        docs: {{ .Values.platform.behaviour.docs | default true }}
        groups: {{ .Values.platform.behaviour.groups | default true }}
        apiManagement: {{ .Values.platform.behaviour.apiManagement | default true }}
        {{- end }}
     
    {{- if .Values.vault.enabled }}
    vault:
      baseUrl: ${VAULT_BASE_URL}
      token: ${VAULT_TOKEN_RENEWABLE}
      secretEngine: ${VAULT_SECRET_ENGINE}
    {{- end }}      
    grafana:
      domain: ${GRAFANA_DOMAIN}
      unifiedAlerting: true
    {{- if .Values.kong.enabled }}
    kong:
      api-manager: ${KONG_API_MANAGER_HOST}
      admin-token: ${KONG_ADMIN_TOKEN}
    {{- end }}